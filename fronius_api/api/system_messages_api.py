# coding: utf-8

"""
    Solar.web Query API (SWQAPI)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fronius_api.api_client import ApiClient


class SystemMessagesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_device_messages(self, pv_system_id, device_id, _from, language_code, **kwargs):  # noqa: E501
        """get_device_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_messages(pv_system_id, device_id, _from, language_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param str device_id: (required)
        :param str _from: (required)
        :param str language_code: (required)
        :param str state_type:
        :param int state_code:
        :param str to:
        :param int offset:
        :param int limit:
        :return: SystemMessageList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_device_messages_with_http_info(pv_system_id, device_id, _from, language_code, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_messages_with_http_info(pv_system_id, device_id, _from, language_code, **kwargs)  # noqa: E501
            return data

    def get_device_messages_with_http_info(self, pv_system_id, device_id, _from, language_code, **kwargs):  # noqa: E501
        """get_device_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_messages_with_http_info(pv_system_id, device_id, _from, language_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param str device_id: (required)
        :param str _from: (required)
        :param str language_code: (required)
        :param str state_type:
        :param int state_code:
        :param str to:
        :param int offset:
        :param int limit:
        :return: SystemMessageList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pv_system_id', 'device_id', '_from', 'language_code', 'state_type', 'state_code', 'to', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_messages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pv_system_id' is set
        if ('pv_system_id' not in params or
                params['pv_system_id'] is None):
            raise ValueError("Missing the required parameter `pv_system_id` when calling `get_device_messages`")  # noqa: E501
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_device_messages`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `get_device_messages`")  # noqa: E501
        # verify the required parameter 'language_code' is set
        if ('language_code' not in params or
                params['language_code'] is None):
            raise ValueError("Missing the required parameter `language_code` when calling `get_device_messages`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pv_system_id' in params:
            path_params['pvSystemId'] = params['pv_system_id']  # noqa: E501
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'language_code' in params:
            path_params['languageCode'] = params['language_code']  # noqa: E501

        query_params = []
        if 'state_type' in params:
            query_params.append(('stateType', params['state_type']))  # noqa: E501
        if 'state_code' in params:
            query_params.append(('stateCode', params['state_code']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessKeyId', 'AccessKeyValue', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/pvsystems/{pvSystemId}/devices/{deviceId}/messages/{languageCode}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemMessageList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_messages_count(self, pv_system_id, device_id, _from, **kwargs):  # noqa: E501
        """get_device_messages_count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_messages_count(pv_system_id, device_id, _from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param str device_id: (required)
        :param str _from: (required)
        :param str state_type:
        :param int state_code:
        :param str to:
        :param str language_code:
        :return: SystemMessageList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_device_messages_count_with_http_info(pv_system_id, device_id, _from, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_messages_count_with_http_info(pv_system_id, device_id, _from, **kwargs)  # noqa: E501
            return data

    def get_device_messages_count_with_http_info(self, pv_system_id, device_id, _from, **kwargs):  # noqa: E501
        """get_device_messages_count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_messages_count_with_http_info(pv_system_id, device_id, _from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param str device_id: (required)
        :param str _from: (required)
        :param str state_type:
        :param int state_code:
        :param str to:
        :param str language_code:
        :return: SystemMessageList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pv_system_id', 'device_id', '_from', 'state_type', 'state_code', 'to', 'language_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_messages_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pv_system_id' is set
        if ('pv_system_id' not in params or
                params['pv_system_id'] is None):
            raise ValueError("Missing the required parameter `pv_system_id` when calling `get_device_messages_count`")  # noqa: E501
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_device_messages_count`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `get_device_messages_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pv_system_id' in params:
            path_params['pvSystemId'] = params['pv_system_id']  # noqa: E501
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []
        if 'state_type' in params:
            query_params.append(('stateType', params['state_type']))  # noqa: E501
        if 'state_code' in params:
            query_params.append(('stateCode', params['state_code']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'language_code' in params:
            query_params.append(('languageCode', params['language_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessKeyId', 'AccessKeyValue', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/pvsystems/{pvSystemId}/devices/{deviceId}/messages-count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemMessageList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_system_messages(self, pv_system_id, _from, language_code, **kwargs):  # noqa: E501
        """get_system_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_system_messages(pv_system_id, _from, language_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param str _from: (required)
        :param str language_code: (required)
        :param str state_type:
        :param int state_code:
        :param str to:
        :param str type:
        :param int offset:
        :param int limit:
        :return: SystemMessageList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_system_messages_with_http_info(pv_system_id, _from, language_code, **kwargs)  # noqa: E501
        else:
            (data) = self.get_system_messages_with_http_info(pv_system_id, _from, language_code, **kwargs)  # noqa: E501
            return data

    def get_system_messages_with_http_info(self, pv_system_id, _from, language_code, **kwargs):  # noqa: E501
        """get_system_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_system_messages_with_http_info(pv_system_id, _from, language_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param str _from: (required)
        :param str language_code: (required)
        :param str state_type:
        :param int state_code:
        :param str to:
        :param str type:
        :param int offset:
        :param int limit:
        :return: SystemMessageList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pv_system_id', '_from', 'language_code', 'state_type', 'state_code', 'to', 'type', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_system_messages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pv_system_id' is set
        if ('pv_system_id' not in params or
                params['pv_system_id'] is None):
            raise ValueError("Missing the required parameter `pv_system_id` when calling `get_system_messages`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `get_system_messages`")  # noqa: E501
        # verify the required parameter 'language_code' is set
        if ('language_code' not in params or
                params['language_code'] is None):
            raise ValueError("Missing the required parameter `language_code` when calling `get_system_messages`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pv_system_id' in params:
            path_params['pvSystemId'] = params['pv_system_id']  # noqa: E501
        if 'language_code' in params:
            path_params['languageCode'] = params['language_code']  # noqa: E501

        query_params = []
        if 'state_type' in params:
            query_params.append(('stateType', params['state_type']))  # noqa: E501
        if 'state_code' in params:
            query_params.append(('stateCode', params['state_code']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessKeyId', 'AccessKeyValue', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/pvsystems/{pvSystemId}/messages/{languageCode}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemMessageList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_system_messages_count(self, pv_system_id, _from, **kwargs):  # noqa: E501
        """get_system_messages_count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_system_messages_count(pv_system_id, _from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param str _from: (required)
        :param str state_type:
        :param int state_code:
        :param str to:
        :param str type:
        :param str language_code:
        :return: SystemMessageList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_system_messages_count_with_http_info(pv_system_id, _from, **kwargs)  # noqa: E501
        else:
            (data) = self.get_system_messages_count_with_http_info(pv_system_id, _from, **kwargs)  # noqa: E501
            return data

    def get_system_messages_count_with_http_info(self, pv_system_id, _from, **kwargs):  # noqa: E501
        """get_system_messages_count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_system_messages_count_with_http_info(pv_system_id, _from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param str _from: (required)
        :param str state_type:
        :param int state_code:
        :param str to:
        :param str type:
        :param str language_code:
        :return: SystemMessageList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pv_system_id', '_from', 'state_type', 'state_code', 'to', 'type', 'language_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_system_messages_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pv_system_id' is set
        if ('pv_system_id' not in params or
                params['pv_system_id'] is None):
            raise ValueError("Missing the required parameter `pv_system_id` when calling `get_system_messages_count`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `get_system_messages_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pv_system_id' in params:
            path_params['pvSystemId'] = params['pv_system_id']  # noqa: E501

        query_params = []
        if 'state_type' in params:
            query_params.append(('stateType', params['state_type']))  # noqa: E501
        if 'state_code' in params:
            query_params.append(('stateCode', params['state_code']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'language_code' in params:
            query_params.append(('languageCode', params['language_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessKeyId', 'AccessKeyValue', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/pvsystems/{pvSystemId}/messages-count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemMessageList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
