# coding: utf-8

"""
    Solar.web Query API (SWQAPI)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fronius_api.api_client import ApiClient


class MetadataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_device_count(self, pv_system_id, **kwargs):  # noqa: E501
        """This method returns number of devices contained within single PV System  # noqa: E501

        Metadata method - this method takes PV System ID as its parameter and will return number of devices within that PV System (also owned by user whose api key was used to send request)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_count(pv_system_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: ID of a PV System whose devices are requested for inspection (required)
        :param str type: Type filter - one or more (coma separated, no spaces) types of devices.
        :param bool is_active: If set to \"true\", only active devices will be selected. If set to \"false\" only inactive devices will be selected. If it's not defined, both active and inactive devices will be selected.
        :return: Counter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_device_count_with_http_info(pv_system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_count_with_http_info(pv_system_id, **kwargs)  # noqa: E501
            return data

    def get_device_count_with_http_info(self, pv_system_id, **kwargs):  # noqa: E501
        """This method returns number of devices contained within single PV System  # noqa: E501

        Metadata method - this method takes PV System ID as its parameter and will return number of devices within that PV System (also owned by user whose api key was used to send request)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_count_with_http_info(pv_system_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: ID of a PV System whose devices are requested for inspection (required)
        :param str type: Type filter - one or more (coma separated, no spaces) types of devices.
        :param bool is_active: If set to \"true\", only active devices will be selected. If set to \"false\" only inactive devices will be selected. If it's not defined, both active and inactive devices will be selected.
        :return: Counter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pv_system_id', 'type', 'is_active']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pv_system_id' is set
        if ('pv_system_id' not in params or
                params['pv_system_id'] is None):
            raise ValueError("Missing the required parameter `pv_system_id` when calling `get_device_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pv_system_id' in params:
            path_params['pvSystemId'] = params['pv_system_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'is_active' in params:
            query_params.append(('isActive', params['is_active']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessKeyId', 'AccessKeyValue', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/pvsystems/{pvSystemId}/devices-count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Counter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_id_list(self, pv_system_id, **kwargs):  # noqa: E501
        """This method returns list of all device ids, within single PV System  # noqa: E501

        Metadata method - this method takes PV System ID as its parameter and will return list of all devices (their ids), contained within that PV System (also owned by user whose api key was used to send request)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_id_list(pv_system_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: ID of a PV System whose devices are requested for inspection (required)
        :param str type: Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain.
        :param int offset: Skip this many elements.
        :param int limit: Return max this many elements.
        :param bool is_active: If set to \"true\", only active devices will be selected. If set to \"false\" only inactive devices will be selected. If it's not defined, both active and inactive devices will be selected.
        :return: DeviceIdsOnly
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_device_id_list_with_http_info(pv_system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_id_list_with_http_info(pv_system_id, **kwargs)  # noqa: E501
            return data

    def get_device_id_list_with_http_info(self, pv_system_id, **kwargs):  # noqa: E501
        """This method returns list of all device ids, within single PV System  # noqa: E501

        Metadata method - this method takes PV System ID as its parameter and will return list of all devices (their ids), contained within that PV System (also owned by user whose api key was used to send request)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_id_list_with_http_info(pv_system_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: ID of a PV System whose devices are requested for inspection (required)
        :param str type: Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain.
        :param int offset: Skip this many elements.
        :param int limit: Return max this many elements.
        :param bool is_active: If set to \"true\", only active devices will be selected. If set to \"false\" only inactive devices will be selected. If it's not defined, both active and inactive devices will be selected.
        :return: DeviceIdsOnly
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pv_system_id', 'type', 'offset', 'limit', 'is_active']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_id_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pv_system_id' is set
        if ('pv_system_id' not in params or
                params['pv_system_id'] is None):
            raise ValueError("Missing the required parameter `pv_system_id` when calling `get_device_id_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pv_system_id' in params:
            path_params['pvSystemId'] = params['pv_system_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'is_active' in params:
            query_params.append(('isActive', params['is_active']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessKeyId', 'AccessKeyValue', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/pvsystems/{pvSystemId}/devices-list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceIdsOnly',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_meta_data(self, pv_system_id, device_id, **kwargs):  # noqa: E501
        """This method returns single device and its details  # noqa: E501

        Metadata method - this method takes PV System ID and device ID as parameters and returns device (and its details) whose id was sent with request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_meta_data(pv_system_id, device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: ID of a PV System which contains certain device (required)
        :param str device_id: ID of a device user requires to inspect (required)
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_device_meta_data_with_http_info(pv_system_id, device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_meta_data_with_http_info(pv_system_id, device_id, **kwargs)  # noqa: E501
            return data

    def get_device_meta_data_with_http_info(self, pv_system_id, device_id, **kwargs):  # noqa: E501
        """This method returns single device and its details  # noqa: E501

        Metadata method - this method takes PV System ID and device ID as parameters and returns device (and its details) whose id was sent with request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_meta_data_with_http_info(pv_system_id, device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: ID of a PV System which contains certain device (required)
        :param str device_id: ID of a device user requires to inspect (required)
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pv_system_id', 'device_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_meta_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pv_system_id' is set
        if ('pv_system_id' not in params or
                params['pv_system_id'] is None):
            raise ValueError("Missing the required parameter `pv_system_id` when calling `get_device_meta_data`")  # noqa: E501
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `get_device_meta_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pv_system_id' in params:
            path_params['pvSystemId'] = params['pv_system_id']  # noqa: E501
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessKeyId', 'AccessKeyValue', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/pvsystems/{pvSystemId}/devices/{deviceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Device',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_meta_data_list(self, pv_system_id, **kwargs):  # noqa: E501
        """This method returns list of all devices contained within single PV System  # noqa: E501

        Metadata method - this method takes PV System ID as its parameter and will return list of all devices and their details contained within that PV System (also owned by user whose api key was used to send request)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_meta_data_list(pv_system_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: ID of a PV System whose devices are requested for inspection (required)
        :param str type: Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain.
        :param int offset: Skip this many elements.
        :param int limit: Return max this many elements.
        :param bool is_active: If set to \"true\", only active devices will be selected. If set to \"false\" only inactive devices will be selected. If it's not defined, both active and inactive devices will be selected.
        :return: DeviceList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_device_meta_data_list_with_http_info(pv_system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_meta_data_list_with_http_info(pv_system_id, **kwargs)  # noqa: E501
            return data

    def get_device_meta_data_list_with_http_info(self, pv_system_id, **kwargs):  # noqa: E501
        """This method returns list of all devices contained within single PV System  # noqa: E501

        Metadata method - this method takes PV System ID as its parameter and will return list of all devices and their details contained within that PV System (also owned by user whose api key was used to send request)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_meta_data_list_with_http_info(pv_system_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: ID of a PV System whose devices are requested for inspection (required)
        :param str type: Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain.
        :param int offset: Skip this many elements.
        :param int limit: Return max this many elements.
        :param bool is_active: If set to \"true\", only active devices will be selected. If set to \"false\" only inactive devices will be selected. If it's not defined, both active and inactive devices will be selected.
        :return: DeviceList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pv_system_id', 'type', 'offset', 'limit', 'is_active']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_meta_data_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pv_system_id' is set
        if ('pv_system_id' not in params or
                params['pv_system_id'] is None):
            raise ValueError("Missing the required parameter `pv_system_id` when calling `get_device_meta_data_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pv_system_id' in params:
            path_params['pvSystemId'] = params['pv_system_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'is_active' in params:
            query_params.append(('isActive', params['is_active']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessKeyId', 'AccessKeyValue', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/pvsystems/{pvSystemId}/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_system_count(self, **kwargs):  # noqa: E501
        """This method returns number of PV Systems owned by user  # noqa: E501

        Metadata method - this method takes no parameters and will return number of PV Systems that are owned by a user whose api key was used to send request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_system_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain.
        :return: Counter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_system_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_system_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_system_count_with_http_info(self, **kwargs):  # noqa: E501
        """This method returns number of PV Systems owned by user  # noqa: E501

        Metadata method - this method takes no parameters and will return number of PV Systems that are owned by a user whose api key was used to send request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_system_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain.
        :return: Counter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_system_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessKeyId', 'AccessKeyValue', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/pvsystems-count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Counter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_system_id_list(self, **kwargs):  # noqa: E501
        """This method returns list of all PV Systems (ids only) owned by user  # noqa: E501

        Metadata method - this method takes no parameters and will return list of PV System IDs that are owned by a user whose api key was used to send request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_system_id_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain.
        :param int offset: Skip this many elements.
        :param int limit: Return max this many elements.
        :return: PvSystemIdsOnly
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_system_id_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_system_id_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_system_id_list_with_http_info(self, **kwargs):  # noqa: E501
        """This method returns list of all PV Systems (ids only) owned by user  # noqa: E501

        Metadata method - this method takes no parameters and will return list of PV System IDs that are owned by a user whose api key was used to send request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_system_id_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain.
        :param int offset: Skip this many elements.
        :param int limit: Return max this many elements.
        :return: PvSystemIdsOnly
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_system_id_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessKeyId', 'AccessKeyValue', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/pvsystems-list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PvSystemIdsOnly',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_system_meta_data(self, pv_system_id, **kwargs):  # noqa: E501
        """This method returns single PV System and its details  # noqa: E501

        Metadata method - this method takes PV System ID as its parameter and will return details of that PV Systems, also owned by user whose api key was used to send request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_system_meta_data(pv_system_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: ID of a PV System user requires to inspect (required)
        :return: PvSystem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_system_meta_data_with_http_info(pv_system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_system_meta_data_with_http_info(pv_system_id, **kwargs)  # noqa: E501
            return data

    def get_system_meta_data_with_http_info(self, pv_system_id, **kwargs):  # noqa: E501
        """This method returns single PV System and its details  # noqa: E501

        Metadata method - this method takes PV System ID as its parameter and will return details of that PV Systems, also owned by user whose api key was used to send request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_system_meta_data_with_http_info(pv_system_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: ID of a PV System user requires to inspect (required)
        :return: PvSystem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pv_system_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_system_meta_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pv_system_id' is set
        if ('pv_system_id' not in params or
                params['pv_system_id'] is None):
            raise ValueError("Missing the required parameter `pv_system_id` when calling `get_system_meta_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pv_system_id' in params:
            path_params['pvSystemId'] = params['pv_system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessKeyId', 'AccessKeyValue', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/pvsystems/{pvSystemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PvSystem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_system_meta_data_list(self, **kwargs):  # noqa: E501
        """This method returns list of all PV Systems and their details owned by user  # noqa: E501

        Metadata method - this method takes no parameters and will return list of PV Systems that are owned by a user whose api key was used to send request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_system_meta_data_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain.
        :param int offset: Skip this many elements.
        :param int limit: Return max this many elements.
        :return: PvSystemList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_system_meta_data_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_system_meta_data_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_system_meta_data_list_with_http_info(self, **kwargs):  # noqa: E501
        """This method returns list of all PV Systems and their details owned by user  # noqa: E501

        Metadata method - this method takes no parameters and will return list of PV Systems that are owned by a user whose api key was used to send request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_system_meta_data_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain.
        :param int offset: Skip this many elements.
        :param int limit: Return max this many elements.
        :return: PvSystemList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_system_meta_data_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessKeyId', 'AccessKeyValue', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/pvsystems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PvSystemList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
