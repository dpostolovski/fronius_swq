# coding: utf-8

"""
    Solar.web Query API (SWQAPI)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fronius_api.api_client import ApiClient


class AggregatedApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_aggregated_data_days(self, pv_system_id, year, month, **kwargs):  # noqa: E501
        """This method returns daily aggregated data for a specific PV system for a specific month of a year.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregated_data_days(pv_system_id, year, month, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param int year: (required)
        :param int month: (required)
        :param str channel:
        :return: AggregatedValues
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregated_data_days_with_http_info(pv_system_id, year, month, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregated_data_days_with_http_info(pv_system_id, year, month, **kwargs)  # noqa: E501
            return data

    def get_aggregated_data_days_with_http_info(self, pv_system_id, year, month, **kwargs):  # noqa: E501
        """This method returns daily aggregated data for a specific PV system for a specific month of a year.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregated_data_days_with_http_info(pv_system_id, year, month, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param int year: (required)
        :param int month: (required)
        :param str channel:
        :return: AggregatedValues
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pv_system_id', 'year', 'month', 'channel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregated_data_days" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pv_system_id' is set
        if ('pv_system_id' not in params or
                params['pv_system_id'] is None):
            raise ValueError("Missing the required parameter `pv_system_id` when calling `get_aggregated_data_days`")  # noqa: E501
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `get_aggregated_data_days`")  # noqa: E501
        # verify the required parameter 'month' is set
        if ('month' not in params or
                params['month'] is None):
            raise ValueError("Missing the required parameter `month` when calling `get_aggregated_data_days`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pv_system_id' in params:
            path_params['pvSystemId'] = params['pv_system_id']  # noqa: E501
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501
        if 'month' in params:
            path_params['month'] = params['month']  # noqa: E501

        query_params = []
        if 'channel' in params:
            query_params.append(('channel', params['channel']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessKeyId', 'AccessKeyValue', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/pvsystems/{pvSystemId}/aggdata/years/{year}/months/{month}/days', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregatedValues',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregated_data_months(self, pv_system_id, year, **kwargs):  # noqa: E501
        """This method returns monthly aggregated data for a specific PV system for a specific year.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregated_data_months(pv_system_id, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param int year: (required)
        :param str channel:
        :return: AggregatedValues
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregated_data_months_with_http_info(pv_system_id, year, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregated_data_months_with_http_info(pv_system_id, year, **kwargs)  # noqa: E501
            return data

    def get_aggregated_data_months_with_http_info(self, pv_system_id, year, **kwargs):  # noqa: E501
        """This method returns monthly aggregated data for a specific PV system for a specific year.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregated_data_months_with_http_info(pv_system_id, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param int year: (required)
        :param str channel:
        :return: AggregatedValues
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pv_system_id', 'year', 'channel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregated_data_months" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pv_system_id' is set
        if ('pv_system_id' not in params or
                params['pv_system_id'] is None):
            raise ValueError("Missing the required parameter `pv_system_id` when calling `get_aggregated_data_months`")  # noqa: E501
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `get_aggregated_data_months`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pv_system_id' in params:
            path_params['pvSystemId'] = params['pv_system_id']  # noqa: E501
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501

        query_params = []
        if 'channel' in params:
            query_params.append(('channel', params['channel']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessKeyId', 'AccessKeyValue', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/pvsystems/{pvSystemId}/aggdata/years/{year}/months', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregatedValues',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregated_data_specific_day(self, pv_system_id, year, month, day, **kwargs):  # noqa: E501
        """This method returns daily aggregated data for a specific PV system for a specific date.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregated_data_specific_day(pv_system_id, year, month, day, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param int year: (required)
        :param int month: (required)
        :param int day: (required)
        :param str channel:
        :return: AggregatedValues
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregated_data_specific_day_with_http_info(pv_system_id, year, month, day, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregated_data_specific_day_with_http_info(pv_system_id, year, month, day, **kwargs)  # noqa: E501
            return data

    def get_aggregated_data_specific_day_with_http_info(self, pv_system_id, year, month, day, **kwargs):  # noqa: E501
        """This method returns daily aggregated data for a specific PV system for a specific date.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregated_data_specific_day_with_http_info(pv_system_id, year, month, day, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param int year: (required)
        :param int month: (required)
        :param int day: (required)
        :param str channel:
        :return: AggregatedValues
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pv_system_id', 'year', 'month', 'day', 'channel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregated_data_specific_day" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pv_system_id' is set
        if ('pv_system_id' not in params or
                params['pv_system_id'] is None):
            raise ValueError("Missing the required parameter `pv_system_id` when calling `get_aggregated_data_specific_day`")  # noqa: E501
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `get_aggregated_data_specific_day`")  # noqa: E501
        # verify the required parameter 'month' is set
        if ('month' not in params or
                params['month'] is None):
            raise ValueError("Missing the required parameter `month` when calling `get_aggregated_data_specific_day`")  # noqa: E501
        # verify the required parameter 'day' is set
        if ('day' not in params or
                params['day'] is None):
            raise ValueError("Missing the required parameter `day` when calling `get_aggregated_data_specific_day`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pv_system_id' in params:
            path_params['pvSystemId'] = params['pv_system_id']  # noqa: E501
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501
        if 'month' in params:
            path_params['month'] = params['month']  # noqa: E501
        if 'day' in params:
            path_params['day'] = params['day']  # noqa: E501

        query_params = []
        if 'channel' in params:
            query_params.append(('channel', params['channel']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessKeyId', 'AccessKeyValue', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/pvsystems/{pvSystemId}/aggdata/years/{year}/months/{month}/days/{day}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregatedValues',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregated_data_specific_month(self, pv_system_id, year, month, **kwargs):  # noqa: E501
        """This method returns monthly aggregated data for a specific PV system for a specific month of a year.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregated_data_specific_month(pv_system_id, year, month, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param int year: (required)
        :param int month: (required)
        :param str channel:
        :return: AggregatedValues
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregated_data_specific_month_with_http_info(pv_system_id, year, month, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregated_data_specific_month_with_http_info(pv_system_id, year, month, **kwargs)  # noqa: E501
            return data

    def get_aggregated_data_specific_month_with_http_info(self, pv_system_id, year, month, **kwargs):  # noqa: E501
        """This method returns monthly aggregated data for a specific PV system for a specific month of a year.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregated_data_specific_month_with_http_info(pv_system_id, year, month, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param int year: (required)
        :param int month: (required)
        :param str channel:
        :return: AggregatedValues
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pv_system_id', 'year', 'month', 'channel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregated_data_specific_month" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pv_system_id' is set
        if ('pv_system_id' not in params or
                params['pv_system_id'] is None):
            raise ValueError("Missing the required parameter `pv_system_id` when calling `get_aggregated_data_specific_month`")  # noqa: E501
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `get_aggregated_data_specific_month`")  # noqa: E501
        # verify the required parameter 'month' is set
        if ('month' not in params or
                params['month'] is None):
            raise ValueError("Missing the required parameter `month` when calling `get_aggregated_data_specific_month`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pv_system_id' in params:
            path_params['pvSystemId'] = params['pv_system_id']  # noqa: E501
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501
        if 'month' in params:
            path_params['month'] = params['month']  # noqa: E501

        query_params = []
        if 'channel' in params:
            query_params.append(('channel', params['channel']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessKeyId', 'AccessKeyValue', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/pvsystems/{pvSystemId}/aggdata/years/{year}/months/{month}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregatedValues',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregated_data_specific_year(self, pv_system_id, year, **kwargs):  # noqa: E501
        """This method returns annual aggregated data for a specific PV system for a specific year.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregated_data_specific_year(pv_system_id, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param int year: (required)
        :param str channel:
        :return: AggregatedValues
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregated_data_specific_year_with_http_info(pv_system_id, year, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregated_data_specific_year_with_http_info(pv_system_id, year, **kwargs)  # noqa: E501
            return data

    def get_aggregated_data_specific_year_with_http_info(self, pv_system_id, year, **kwargs):  # noqa: E501
        """This method returns annual aggregated data for a specific PV system for a specific year.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregated_data_specific_year_with_http_info(pv_system_id, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param int year: (required)
        :param str channel:
        :return: AggregatedValues
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pv_system_id', 'year', 'channel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregated_data_specific_year" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pv_system_id' is set
        if ('pv_system_id' not in params or
                params['pv_system_id'] is None):
            raise ValueError("Missing the required parameter `pv_system_id` when calling `get_aggregated_data_specific_year`")  # noqa: E501
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `get_aggregated_data_specific_year`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pv_system_id' in params:
            path_params['pvSystemId'] = params['pv_system_id']  # noqa: E501
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501

        query_params = []
        if 'channel' in params:
            query_params.append(('channel', params['channel']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessKeyId', 'AccessKeyValue', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/pvsystems/{pvSystemId}/aggdata/years/{year}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregatedValues',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregated_data_total(self, pv_system_id, **kwargs):  # noqa: E501
        """This method returns total lifetime aggregated data for a specific PV system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregated_data_total(pv_system_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param str channel:
        :return: AggregatedValues
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregated_data_total_with_http_info(pv_system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregated_data_total_with_http_info(pv_system_id, **kwargs)  # noqa: E501
            return data

    def get_aggregated_data_total_with_http_info(self, pv_system_id, **kwargs):  # noqa: E501
        """This method returns total lifetime aggregated data for a specific PV system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregated_data_total_with_http_info(pv_system_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param str channel:
        :return: AggregatedValues
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pv_system_id', 'channel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregated_data_total" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pv_system_id' is set
        if ('pv_system_id' not in params or
                params['pv_system_id'] is None):
            raise ValueError("Missing the required parameter `pv_system_id` when calling `get_aggregated_data_total`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pv_system_id' in params:
            path_params['pvSystemId'] = params['pv_system_id']  # noqa: E501

        query_params = []
        if 'channel' in params:
            query_params.append(('channel', params['channel']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessKeyId', 'AccessKeyValue', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/pvsystems/{pvSystemId}/aggdata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregatedValues',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregated_data_years(self, pv_system_id, **kwargs):  # noqa: E501
        """This method returns annual aggregated data for a specific PV system for all years since installation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregated_data_years(pv_system_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param str channel:
        :return: AggregatedValues
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregated_data_years_with_http_info(pv_system_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregated_data_years_with_http_info(pv_system_id, **kwargs)  # noqa: E501
            return data

    def get_aggregated_data_years_with_http_info(self, pv_system_id, **kwargs):  # noqa: E501
        """This method returns annual aggregated data for a specific PV system for all years since installation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregated_data_years_with_http_info(pv_system_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pv_system_id: (required)
        :param str channel:
        :return: AggregatedValues
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pv_system_id', 'channel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregated_data_years" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pv_system_id' is set
        if ('pv_system_id' not in params or
                params['pv_system_id'] is None):
            raise ValueError("Missing the required parameter `pv_system_id` when calling `get_aggregated_data_years`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pv_system_id' in params:
            path_params['pvSystemId'] = params['pv_system_id']  # noqa: E501

        query_params = []
        if 'channel' in params:
            query_params.append(('channel', params['channel']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessKeyId', 'AccessKeyValue', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/pvsystems/{pvSystemId}/aggdata/years', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregatedValues',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
