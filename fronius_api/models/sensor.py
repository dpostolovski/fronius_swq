# coding: utf-8

"""
    Solar.web Query API (SWQAPI)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Sensor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sensor_name': 'str',
        'is_active': 'bool',
        'deactivation_date': 'str'
    }

    attribute_map = {
        'sensor_name': 'sensorName',
        'is_active': 'isActive',
        'deactivation_date': 'deactivationDate'
    }

    def __init__(self, sensor_name=None, is_active=None, deactivation_date=None):  # noqa: E501
        """Sensor - a model defined in Swagger"""  # noqa: E501
        self._sensor_name = None
        self._is_active = None
        self._deactivation_date = None
        self.discriminator = None
        if sensor_name is not None:
            self.sensor_name = sensor_name
        if is_active is not None:
            self.is_active = is_active
        if deactivation_date is not None:
            self.deactivation_date = deactivation_date

    @property
    def sensor_name(self):
        """Gets the sensor_name of this Sensor.  # noqa: E501


        :return: The sensor_name of this Sensor.  # noqa: E501
        :rtype: str
        """
        return self._sensor_name

    @sensor_name.setter
    def sensor_name(self, sensor_name):
        """Sets the sensor_name of this Sensor.


        :param sensor_name: The sensor_name of this Sensor.  # noqa: E501
        :type: str
        """

        self._sensor_name = sensor_name

    @property
    def is_active(self):
        """Gets the is_active of this Sensor.  # noqa: E501


        :return: The is_active of this Sensor.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Sensor.


        :param is_active: The is_active of this Sensor.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def deactivation_date(self):
        """Gets the deactivation_date of this Sensor.  # noqa: E501


        :return: The deactivation_date of this Sensor.  # noqa: E501
        :rtype: str
        """
        return self._deactivation_date

    @deactivation_date.setter
    def deactivation_date(self, deactivation_date):
        """Sets the deactivation_date of this Sensor.


        :param deactivation_date: The deactivation_date of this Sensor.  # noqa: E501
        :type: str
        """

        self._deactivation_date = deactivation_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Sensor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sensor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
