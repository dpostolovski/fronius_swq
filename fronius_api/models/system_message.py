# coding: utf-8

"""
    Solar.web Query API (SWQAPI)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SystemMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pv_system_id': 'str',
        'device_id': 'str',
        'state_type': 'str',
        'state_code': 'int',
        'log_date_time': 'str',
        'text': 'str'
    }

    attribute_map = {
        'pv_system_id': 'pvSystemId',
        'device_id': 'deviceId',
        'state_type': 'stateType',
        'state_code': 'stateCode',
        'log_date_time': 'logDateTime',
        'text': 'text'
    }

    def __init__(self, pv_system_id=None, device_id=None, state_type=None, state_code=None, log_date_time=None, text=None):  # noqa: E501
        """SystemMessage - a model defined in Swagger"""  # noqa: E501
        self._pv_system_id = None
        self._device_id = None
        self._state_type = None
        self._state_code = None
        self._log_date_time = None
        self._text = None
        self.discriminator = None
        if pv_system_id is not None:
            self.pv_system_id = pv_system_id
        if device_id is not None:
            self.device_id = device_id
        if state_type is not None:
            self.state_type = state_type
        if state_code is not None:
            self.state_code = state_code
        if log_date_time is not None:
            self.log_date_time = log_date_time
        if text is not None:
            self.text = text

    @property
    def pv_system_id(self):
        """Gets the pv_system_id of this SystemMessage.  # noqa: E501


        :return: The pv_system_id of this SystemMessage.  # noqa: E501
        :rtype: str
        """
        return self._pv_system_id

    @pv_system_id.setter
    def pv_system_id(self, pv_system_id):
        """Sets the pv_system_id of this SystemMessage.


        :param pv_system_id: The pv_system_id of this SystemMessage.  # noqa: E501
        :type: str
        """

        self._pv_system_id = pv_system_id

    @property
    def device_id(self):
        """Gets the device_id of this SystemMessage.  # noqa: E501


        :return: The device_id of this SystemMessage.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this SystemMessage.


        :param device_id: The device_id of this SystemMessage.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def state_type(self):
        """Gets the state_type of this SystemMessage.  # noqa: E501


        :return: The state_type of this SystemMessage.  # noqa: E501
        :rtype: str
        """
        return self._state_type

    @state_type.setter
    def state_type(self, state_type):
        """Sets the state_type of this SystemMessage.


        :param state_type: The state_type of this SystemMessage.  # noqa: E501
        :type: str
        """

        self._state_type = state_type

    @property
    def state_code(self):
        """Gets the state_code of this SystemMessage.  # noqa: E501


        :return: The state_code of this SystemMessage.  # noqa: E501
        :rtype: int
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """Sets the state_code of this SystemMessage.


        :param state_code: The state_code of this SystemMessage.  # noqa: E501
        :type: int
        """

        self._state_code = state_code

    @property
    def log_date_time(self):
        """Gets the log_date_time of this SystemMessage.  # noqa: E501


        :return: The log_date_time of this SystemMessage.  # noqa: E501
        :rtype: str
        """
        return self._log_date_time

    @log_date_time.setter
    def log_date_time(self, log_date_time):
        """Sets the log_date_time of this SystemMessage.


        :param log_date_time: The log_date_time of this SystemMessage.  # noqa: E501
        :type: str
        """

        self._log_date_time = log_date_time

    @property
    def text(self):
        """Gets the text of this SystemMessage.  # noqa: E501


        :return: The text of this SystemMessage.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SystemMessage.


        :param text: The text of this SystemMessage.  # noqa: E501
        :type: str
        """

        self._text = text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
