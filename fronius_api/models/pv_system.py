# coding: utf-8

"""
    Solar.web Query API (SWQAPI)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PvSystem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pv_system_id': 'str',
        'name': 'str',
        'address': 'Address',
        'picture_url': 'str',
        'peak_power': 'float',
        'installation_date': 'str',
        'last_import': 'str',
        'time_zone': 'str'
    }

    attribute_map = {
        'pv_system_id': 'pvSystemId',
        'name': 'name',
        'address': 'address',
        'picture_url': 'pictureURL',
        'peak_power': 'peakPower',
        'installation_date': 'installationDate',
        'last_import': 'lastImport',
        'time_zone': 'timeZone'
    }

    def __init__(self, pv_system_id=None, name=None, address=None, picture_url=None, peak_power=None, installation_date=None, last_import=None, time_zone=None):  # noqa: E501
        """PvSystem - a model defined in Swagger"""  # noqa: E501
        self._pv_system_id = None
        self._name = None
        self._address = None
        self._picture_url = None
        self._peak_power = None
        self._installation_date = None
        self._last_import = None
        self._time_zone = None
        self.discriminator = None
        if pv_system_id is not None:
            self.pv_system_id = pv_system_id
        if name is not None:
            self.name = name
        if address is not None:
            self.address = address
        if picture_url is not None:
            self.picture_url = picture_url
        if peak_power is not None:
            self.peak_power = peak_power
        if installation_date is not None:
            self.installation_date = installation_date
        if last_import is not None:
            self.last_import = last_import
        if time_zone is not None:
            self.time_zone = time_zone

    @property
    def pv_system_id(self):
        """Gets the pv_system_id of this PvSystem.  # noqa: E501


        :return: The pv_system_id of this PvSystem.  # noqa: E501
        :rtype: str
        """
        return self._pv_system_id

    @pv_system_id.setter
    def pv_system_id(self, pv_system_id):
        """Sets the pv_system_id of this PvSystem.


        :param pv_system_id: The pv_system_id of this PvSystem.  # noqa: E501
        :type: str
        """

        self._pv_system_id = pv_system_id

    @property
    def name(self):
        """Gets the name of this PvSystem.  # noqa: E501


        :return: The name of this PvSystem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PvSystem.


        :param name: The name of this PvSystem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def address(self):
        """Gets the address of this PvSystem.  # noqa: E501


        :return: The address of this PvSystem.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PvSystem.


        :param address: The address of this PvSystem.  # noqa: E501
        :type: Address
        """

        self._address = address

    @property
    def picture_url(self):
        """Gets the picture_url of this PvSystem.  # noqa: E501


        :return: The picture_url of this PvSystem.  # noqa: E501
        :rtype: str
        """
        return self._picture_url

    @picture_url.setter
    def picture_url(self, picture_url):
        """Sets the picture_url of this PvSystem.


        :param picture_url: The picture_url of this PvSystem.  # noqa: E501
        :type: str
        """

        self._picture_url = picture_url

    @property
    def peak_power(self):
        """Gets the peak_power of this PvSystem.  # noqa: E501


        :return: The peak_power of this PvSystem.  # noqa: E501
        :rtype: float
        """
        return self._peak_power

    @peak_power.setter
    def peak_power(self, peak_power):
        """Sets the peak_power of this PvSystem.


        :param peak_power: The peak_power of this PvSystem.  # noqa: E501
        :type: float
        """

        self._peak_power = peak_power

    @property
    def installation_date(self):
        """Gets the installation_date of this PvSystem.  # noqa: E501


        :return: The installation_date of this PvSystem.  # noqa: E501
        :rtype: str
        """
        return self._installation_date

    @installation_date.setter
    def installation_date(self, installation_date):
        """Sets the installation_date of this PvSystem.


        :param installation_date: The installation_date of this PvSystem.  # noqa: E501
        :type: str
        """

        self._installation_date = installation_date

    @property
    def last_import(self):
        """Gets the last_import of this PvSystem.  # noqa: E501


        :return: The last_import of this PvSystem.  # noqa: E501
        :rtype: str
        """
        return self._last_import

    @last_import.setter
    def last_import(self, last_import):
        """Sets the last_import of this PvSystem.


        :param last_import: The last_import of this PvSystem.  # noqa: E501
        :type: str
        """

        self._last_import = last_import

    @property
    def time_zone(self):
        """Gets the time_zone of this PvSystem.  # noqa: E501


        :return: The time_zone of this PvSystem.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this PvSystem.


        :param time_zone: The time_zone of this PvSystem.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PvSystem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PvSystem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
